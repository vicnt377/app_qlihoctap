<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<h2 class="dashboard-title mb-4">üéì K·∫øt qu·∫£ h·ªçc t·∫≠p</h2>
<main class="row g-3 mb-4">
    <form method="GET" action="/score" class="row g-3 mb-4">
        <div class="col-md-4">
            <select name="year" class="form-select">
                <option value="T·∫•t c·∫£" {{#if (eq selectedYear 'T·∫•t c·∫£')}}selected{{/if}}>T·∫•t c·∫£</option>
                    {{#each years}}
                        <option value="{{this}}" {{#if (eq ../selectedYear this)}}selected{{/if}}>{{this}}</option>
                    {{/each}}
                </select>
        </div>
        <div class="col-md-4">
            <select name="semester" class="form-select">
                <option value="T·∫•t c·∫£" {{#if (eq selectedSemester 'T·∫•t c·∫£')}}selected{{/if}}>T·∫•t c·∫£</option>
                    {{#each semestersList}}
                        <option value="{{this}}" {{#if (eq ../selectedSemester this)}}selected{{/if}}>{{this}}</option>
                    {{/each}}
                </select>
        </div>
        <div class="col-md-4">
            <button type="submit" class="btn btn-primary"> üîç </button>
        </div>

    </form>

    <!-- C·ªôt T·ªïng K·∫øt To√†n Kh√≥a (Chi·∫øm 30% chi·ªÅu r·ªông) -->
    <div class="col-md-4">
        <div class="card p-4">
            <h5>üìå T·ªïng K·∫øt To√†n Kho√°</h5>
            <p><strong>Trung B√¨nh T√≠ch L≈©y:</strong><span class="badge bg-info"> {{cumulative}}</span></p>
            <p><strong>X·∫øp lo·∫°i h·ªçc l·ª±c:</strong><span class="badge bg-warning text-dark"> {{hocLuc}}</span></p>
        </div>
    </div>

    <!-- C·ªôt B·∫£ng ƒêi·ªÉm (Chi·∫øm 70% chi·ªÅu r·ªông) -->
    <div class="col-md-8">
        <div class="card p-4">
            {{#each semesters}}
            <h4 style="color: #17a2b8">{{tenHocKy}} - {{namHoc}}</h4>
            <form method="POST" action="/score/update">
                <table class="table table-bordered" data-semester>
                    <thead>
                        <tr>
                            <th>M√£ H·ªçc Ph·∫ßn</th>
                            <th>T√™n H·ªçc Ph·∫ßn</th>
                            <th>S·ªë T√≠n Ch·ªâ</th>
                            <th>ƒêi·ªÉm S·ªë</th>
                            <th>ƒêi·ªÉm Ch·ªØ</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each score}}
                        <tr>
                            <td>{{HocPhan.maHocPhan}}</td>
                            <td>{{HocPhan.tenHocPhan}}</td>
                            <td>{{HocPhan.soTinChi}}</td>
                            <td>
                                <input type="number" step="0.1" min="0" max="10" name="scores[{{_id}}][diemSo]" class="form-control" value="{{default diemSo 0}}">
                            </td>
                            <td>
                                <input type="text" name="scores[{{_id}}][diemChu]" class="form-control" value="{{diemChu}}">
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
                <button type="submit" class="btn btn-success mt-2">üíæ L∆∞u ƒëi·ªÉm</button>
            </form>
            {{/each}}
        </div>
    </div>
</main>

<script>
    function convertDiemSoToDiemChu(diemSo) {
        const score = parseFloat(diemSo);
        if (isNaN(score)) return '';

        if (score >= 9.0) return 'A';
        if (score >= 8.0) return 'B+';
        if (score >= 7.0) return 'B';
        if (score >= 6.0) return 'C+';
        if (score >= 5.0) return 'C';
        if (score >= 4.0) return 'D';
        return 'F';
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll('input[name^="scores"][name$="[diemSo]"]').forEach(input => {
            input.addEventListener('input', (e) => {
                const scoreInput = e.target;
                const diemChuInput = scoreInput.closest('tr').querySelector('input[name$="[diemChu]"]');

                const diemSo = scoreInput.value;
                diemChuInput.value = convertDiemSoToDiemChu(diemSo);
            });
        });
    });
</script>
{{!-- <script>
    function parseFloatSafe(val) {
        const num = parseFloat(val);
        return isNaN(num) ? 0 : num;
    }

    function convertTo4Scale(diemSo) {
        if (diemSo >= 9) return 4.0;
        if (diemSo >= 8) return 3.5;
        if (diemSo >= 7) return 3.0;
        if (diemSo >= 6) return 2.5;
        if (diemSo >= 5) return 2.0;
        if (diemSo >= 4) return 1.0;
        return 0.0;
    }

    function calculateGPAandCumulative() {
        const semesterTables = document.querySelectorAll('table[data-semester]');
        
        let gpaCredits = 0, gpaPoints = 0;
        let totalCredits = 0, totalPoints = 0;

        semesterTables.forEach((table, index) => {
            const rows = table.querySelectorAll('tbody tr');

            let semCredits = 0, semPoints = 0;

            rows.forEach(row => {
                const tinChi = parseFloatSafe(row.children[2]?.textContent.trim());
                const diemSo = parseFloatSafe(row.querySelector('input[name$="[diemSo]"]')?.value || row.children[3]?.textContent.trim());
                const diem4 = convertTo4Scale(diemSo);

                semCredits += tinChi;
                semPoints += diem4 * tinChi;
            });

            // GPA for this semester (last rendered is assumed to be latest)
            if (index === semesterTables.length - 1) {
                gpaCredits = semCredits;
                gpaPoints = semPoints;
            }

            totalCredits += semCredits;
            totalPoints += semPoints;
        });

        const gpa = gpaCredits > 0 ? (gpaPoints / gpaCredits).toFixed(2) : "0.00";
        const cumulative = totalCredits > 0 ? (totalPoints / totalCredits).toFixed(2) : "0.00";

        document.getElementById("gpaDisplay").innerText = gpa;
        document.getElementById("cumulativeDisplay").innerText = cumulative;
    }

    document.addEventListener("DOMContentLoaded", () => {
        calculateGPAandCumulative();

        // T·ª± ƒë·ªông c·∫≠p nh·∫≠t GPA & TBTL khi ch·ªânh ƒëi·ªÉm
        document.querySelectorAll('input[name^="scores"][name$="[diemSo]"]').forEach(input => {
            input.addEventListener('input', () => {
                calculateGPAandCumulative();
            });
        });
    });
</script> --}}


