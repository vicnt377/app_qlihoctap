<main>
    <h2 class="dashboard-title mb-4">üìä K·∫øt qu·∫£ h·ªçc t·∫≠p</h2>
    <div class="card p-4 mb-4">
        <div class="table-container">
            <form method="GET" action="/semester">
                <div class="d-flex gap-3 mb-3">
                    <div>
                        <label for="yearSelect">Ch·ªçn NƒÉm H·ªçc:</label>
                        <select name="year">
                            <option value="">T·∫•t c·∫£</option>
                            {{#each years}}
                                <option value="{{this}}" {{#if (eq ../selectedYear this)}}selected{{/if}}>{{this}}</option>
                            {{/each}}
                        </select>
                    </div>

                    <div>
                        <label for="semesterSelect">Ch·ªçn H·ªçc K·ª≥:</label>
                        <select name="semester">
                            <option value="">T·∫•t c·∫£</option>
                            {{#each semestersList}}
                                <option value="{{this}}" {{#if (eq ../selectedSemester this)}}selected{{/if}}>{{this}}</option>
                            {{/each}}
                        </select>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary"> üîç </button>
                    </div>
                </div>
            </form>

            {{#each semesters}}
            <h3>{{tenHocKy}} - {{namHoc}}</h3>
            <table class="table table-bordered" data-semester>
                <thead>
                    <tr>
                        <th>M√£ H·ªçc Ph·∫ßn</th>
                        <th>T√™n H·ªçc Ph·∫ßn</th>
                        <th>S·ªë T√≠n Ch·ªâ</th>
                        <th>ƒêi·ªÉm S·ªë</th>
                        <th>ƒêi·ªÉm Ch·ªØ</th>
                    </tr>
                </thead>
                <tbody>
                    {{#each score}}
                    <tr>
                        <td>{{HocPhan.maHocPhan}}</td>
                        <td>{{HocPhan.tenHocPhan}}</td>
                        <td>{{HocPhan.soTinChi}}</td>
                        <td>{{diemSo}}</td>
                        <td>{{diemChu}}</td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
            {{/each}}

            <div class="mt-4 p-3 bg-light text-dark rounded">
                <h5>üìå T·ªïng K·∫øt</h5>
                <p><strong>Trung B√¨nh H·ªçc K·ª≥ (GPA):</strong> <span id="gpaDisplay">--</span></p>
                <p><strong>Trung B√¨nh T√≠ch L≈©y:</strong> <span id="cumulativeDisplay">--</span></p>
            </div>
        </div>
    </div>
</main>

{{!-- <script>
    // H√†m parseFloatSafe ƒë·ªÉ chuy·ªÉn ƒë·ªïi gi√° tr·ªã sang s·ªë th·ª±c an to√†n
    function parseFloatSafe(val) {
        const num = parseFloat(val);
        return isNaN(num) ? 0 : num;
    }

    // H√†m chuy·ªÉn ƒë·ªïi ƒëi·ªÉm s·ªë sang h·ªá ƒëi·ªÉm 4
    function convertTo4Scale(diemSo) {
        if (diemSo >= 9) return 4.0;
        if (diemSo >= 8) return 3.5;
        if (diemSo >= 7) return 3.0;
        if (diemSo >= 6) return 2.5;
        if (diemSo >= 5) return 2.0;
        if (diemSo >= 4) return 1.5;
        if (diemSo >= 3) return 1.0;
        return 0.0;
    }

    // H√†m t√≠nh GPA v√† TBTL
    function calculateGPAandCumulative() {
        const semesterTables = document.querySelectorAll('table[data-semester]');
        
        // === T√≠nh GPA cho h·ªçc k·ª≥ cu·ªëi ===
        let gpaCredits = 0, gpaPoints = 0;

        semesterTables.forEach(table => {
            const rows = table.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const tinChi = parseFloatSafe(row.children[2]?.textContent.trim());
                const diemSo = parseFloatSafe(row.children[3]?.textContent.trim());
                const diem4 = convertTo4Scale(diemSo); // Chuy·ªÉn ƒë·ªïi ƒëi·ªÉm s·ªë sang ƒëi·ªÉm h·ªá 4
                gpaCredits += tinChi;
                gpaPoints += tinChi * diem4;
            });
        });

        const gpa = gpaCredits > 0 ? (gpaPoints / gpaCredits).toFixed(2) : "0.00";
        document.getElementById("gpaDisplay").innerText = gpa;

        // === T√≠nh Trung B√¨nh T√≠ch L≈©y ===
        let totalCredits = 0, totalPoints = 0;

        semesterTables.forEach(table => {
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const tinChi = parseFloatSafe(row.children[2]?.textContent.trim());
                const diemSo = parseFloatSafe(row.children[3]?.textContent.trim());
                const diem4 = convertTo4Scale(diemSo); // Chuy·ªÉn ƒë·ªïi ƒëi·ªÉm s·ªë sang ƒëi·ªÉm h·ªá 4
                totalCredits += tinChi;
                totalPoints += tinChi * diem4;
            });
        });

        const cumulative = totalCredits > 0 ? (totalPoints / totalCredits).toFixed(2) : "0.00";
        document.getElementById("cumulativeDisplay").innerText = cumulative;
    }

    // Ch·∫°y h√†m t√≠nh GPA v√† TBTL khi DOM ƒë√£ load
    document.addEventListener("DOMContentLoaded", calculateGPAandCumulative);
</script> --}}


