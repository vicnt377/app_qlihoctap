<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="dashboard-header">
  <h2 class="dashboard-title mb-0"><i class="fas fa-book"></i> H·ªçc Ph·∫ßn</h2>

  <div class="user-info position-relative">
    <img src="{{user.avatar}}" alt="Avatar" class="user-avatar dropdown-toggle"
         onerror="this.onerror=null;this.src='/img/avatar.png';"
         id="avatarDropdown" />

    <span class="user-name">{{user.username}}</span>

    <!-- Menu dropdown -->
    <div class="dropdown-menu-user" id="userMenu">
      <a href="/account" class="dropdown-item"><i class="fas fa-pen"></i> Ch·ªânh s·ª≠a th√¥ng tin</a>
      <a href="/login/logout" class="dropdown-item"><i class="fas fa-sign-out-alt"></i> ƒêƒÉng xu·∫•t</a>
    </div>
  </div>
</div>


<main class="container mt-4">
<!-- T√¨m ki·∫øm h·ªçc ph·∫ßn -->
<div class="mb-3">
  <input type="text" class="form-control shadow-sm" id="searchInput" placeholder="üîç T√¨m ki·∫øm h·ªçc ph·∫ßn...">
</div>

<p class="text-muted"><small>(*) L√† h·ªçc ph·∫ßn ƒëi·ªÅu ki·ªán, kh√¥ng t√≠nh ƒëi·ªÉm trung b√¨nh chung t√≠ch l≈©y.</small></p>

<!-- B·∫£ng danh s√°ch h·ªçc ph·∫ßn -->
<div class="table-responsive shadow rounded">
  <table class="table table-hover align-middle text-center" id="courseTable">
    <thead class="table-dark">
      <tr>
        <th>STT</th>
        <th>M√£ H·ªçc Ph·∫ßn</th>
        <th>T√™n H·ªçc Ph·∫ßn</th>
        <th>S·ªë T√≠n Ch·ªâ</th>
        <th>H√†nh ƒê·ªông</th>
      </tr>
    </thead>
    <tbody id="courseBody">
      <!-- JavaScript render -->
    </tbody>
  </table>
</div>

<!-- Ph√¢n trang -->
<div class="d-flex justify-content-between align-items-center mt-3">
  <button class="btn btn-custom" onclick="prevPage()"> ‚¨ÖÔ∏è </button>
  <span id="pageIndicator" class="fw-semibold"></span>
  <button class="btn btn-custom" onclick="nextPage()"> ‚û°Ô∏è </button>
</div>

<!-- Modal th√™m hoc phan -->
<div class="modal fade" id="addScoreModal" tabindex="-1" aria-labelledby="addScoreModalLabel">
  <div class="modal-dialog">
    <form id="addScoreForm" class="modal-content">
      <div class="modal-header">
        <h5 style="color:black" class="modal-title">üìù Th√™m h·ªçc ph·∫ßn</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" name="HocPhan" id="modalCourseId">
        <div class="mb-3">
          <label style="color:black" class="form-label">T√™n h·ªçc ph·∫ßn</label>
          <input type="text" class="form-control" id="modalCourseName" disabled>
        </div>
        <div class="mb-3">
          <label style="color:black" class="form-label">Gi·ªù h·ªçc</label>
          <select class="form-select" id="gioHoc" required>
            <option value="7h - 9h">7h - 9h</option>
            <option value="9h - 11h">9h - 11h</option>
            <option value="7h - 11h">7h - 11h</option>
            <option value="13h - 15h">13h - 15h</option>
            <option value="15h - 17h">15h - 17h</option>
            <option value="13h - 17h">13h - 17h</option>
          </select>
        </div>
        <div class="mb-3">
          <label style="color:black" class="form-label">Th·ª©</label>
          <select class="form-select" id="thu" required>
            <option value="Th·ª© Hai">Th·ª© Hai</option>
            <option value="Th·ª© Ba">Th·ª© Ba</option>
            <option value="Th·ª© T∆∞">Th·ª© T∆∞</option>
            <option value="Th·ª© NƒÉm">Th·ª© NƒÉm</option>
            <option value="Th·ª© S√°u">Th·ª© S√°u</option>
            <option value="Th·ª© B·∫£y">Th·ª© B·∫£y</option>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-success">üíæ</button>
      </div>
    </form>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  const allCourses = {{{coursesJSON}}};
  const existingCourseIds = {{{existingCourseIdsJSON}}};

  const rowsPerPage = 7;
  let currentPage = 1;

  // Kh·ªüi t·∫°o bi·∫øn modal to√†n c·ª•c
  const addScoreModalElement = document.getElementById('addScoreModal');
  const addScoreModal = new bootstrap.Modal(addScoreModalElement);

function renderTablePage(page) {
  const start = (page - 1) * rowsPerPage;
  const tbody = document.getElementById('courseBody');
  tbody.innerHTML = '';

  const paginatedCourses = allCourses.slice(start, start + rowsPerPage);

  paginatedCourses.forEach((course, index) => {
    const daThem = existingCourseIds.includes(String(course._id));
    const actionCell = daThem
      ? '<span class="text-success fw-bold">‚úÖ ƒê√£ th√™m</span>'
      : `<button class="btn btn-sm btn-primary" onclick="openAddScoreModal('${course._id}', '${course.tenHocPhan}')">
          <i class="fas fa-plus"></i>
        </button>`;

    tbody.innerHTML += `
      <tr>
        <td>${start + index + 1}</td>
        <td>${course.maHocPhan}</td>
        <td>${course.tenHocPhan}</td>
        <td>${course.soTinChi}</td>
        <td>${actionCell}</td>
      </tr>
    `;
  });

  document.getElementById('pageIndicator').innerText =
    `${page} / ${Math.ceil(allCourses.length / rowsPerPage)}`;
}


function nextPage() {
  const totalPages = Math.ceil(allCourses.length / rowsPerPage);
  if (currentPage < totalPages) {
    currentPage++;
    renderTablePage(currentPage);
  }
}

function prevPage() {
  if (currentPage > 1) {
    currentPage--;
    renderTablePage(currentPage);
  }
}


  function openAddScoreModal(courseId, courseName) {
    document.getElementById('modalCourseId').value = courseId;
    document.getElementById('modalCourseName').value = courseName;
    addScoreModal.show();
  }

  document.getElementById('addScoreForm').addEventListener('submit', async (e) => {
    e.preventDefault();

    const courseId = document.getElementById('modalCourseId').value;
    const gioHoc = document.getElementById('gioHoc').value;
    const thu = document.getElementById('thu').value;

    try {
      const response = await fetch('/course/add-course', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ HocPhan: courseId, gioHoc, thu }),
      });

      const result = await response.json();
      alert(result.message);
      existingCourseIds.push(courseId);

      addScoreModal.hide();
      renderTablePage(currentPage);
    } catch (error) {
      console.error('L·ªói khi th√™m h·ªçc ph·∫ßn:', error);
    }
  });

  // Kh·ªüi t·∫°o trang ƒë·∫ßu ti√™n khi load
  renderTablePage(currentPage);
</script>
{{!-- Tim kiem hoc phan --}}
<script>
  const searchInput = document.getElementById('searchInput');

  searchInput.addEventListener('input', () => {
    const keyword = searchInput.value.toLowerCase();

    // L·ªçc l·∫°i danh s√°ch h·ªçc ph·∫ßn theo t·ª´ kh√≥a
    const filteredCourses = allCourses.filter(course => {
      return course.tenHocPhan.toLowerCase().includes(keyword) ||
             course.maHocPhan.toLowerCase().includes(keyword);
    });

    // Render l·∫°i b·∫£ng v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
    renderFilteredCourses(filteredCourses);
  });

  function renderFilteredCourses(courses) {
    const tbody = document.getElementById('courseBody');
    tbody.innerHTML = '';

    courses.slice(0, rowsPerPage).forEach((course, index) => {
      const daThem = existingCourseIds.includes(String(course._id));
      const actionCell = daThem
        ? '<span class="text-success fw-bold">‚úÖ ƒê√£ th√™m</span>'
        : `<button class="btn btn-sm btn-primary" onclick="openAddScoreModal('${course._id}', '${course.tenHocPhan}')">
            <i class="fas fa-plus"></i>
          </button>`;

      tbody.innerHTML += `
        <tr>
          <td>${index + 1}</td>
          <td>${course.maHocPhan}</td>
          <td>${course.tenHocPhan}</td>
          <td>${course.soTinChi}</td>
          <td>${actionCell}</td>
        </tr>
      `;
    });

    // C·∫≠p nh·∫≠t ch·ªâ s·ªë ph√¢n trang khi t√¨m ki·∫øm
    document.getElementById('pageIndicator').innerText =
      `1 / ${Math.ceil(courses.length / rowsPerPage)}`;
  }
</script>

<script>
  const avatar = document.getElementById('avatarDropdown');
  const menu = document.getElementById('userMenu');
  const userInfo = avatar.parentElement;

  function isChildOf(parent, child) {
    while (child) {
      if (child === parent) return true;
      child = child.parentElement;
    }
    return false;
  }

  userInfo.addEventListener('mouseover', () => {
    menu.style.display = 'block';
  });

  userInfo.addEventListener('mouseout', (e) => {
    if (!isChildOf(userInfo, e.relatedTarget)) {
      menu.style.display = 'none';
    }
  });

  // ƒê·∫£m b·∫£o menu kh√¥ng bi·∫øn m·∫•t khi chu·ªôt ƒëang ·ªü trong menu
  menu.addEventListener('mouseover', () => {
    menu.style.display = 'block';
  });

  menu.addEventListener('mouseout', (e) => {
    if (!isChildOf(userInfo, e.relatedTarget)) {
      menu.style.display = 'none';
    }
  });
</script>


</main>

<style>
    .hover-shadow:hover {
        transform: translateY(-5px);
        transition: 0.3s ease;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.85);
    padding: 15px 20px;
    border-radius: 12px;
    color: white;
    margin-bottom: 24px;
  }

  .user-name {
    font-weight: 500;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    position: relative;
    cursor: pointer;
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid white;
  }

  .dropdown-menu-user {
    position: absolute;
    top: 50px;
    right: 0;
    background-color: white;
    color: #333;
    border-radius: 8px;
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    display: none;
    min-width: 180px;
    z-index: 999;
  }



  .dropdown-menu-user a {
    display: block;
    padding: 10px 15px;
    text-decoration: none;
    color: #333;
  }

  .dropdown-menu-user a:hover {
    background-color: #f2f2f2;
  }
</style>
