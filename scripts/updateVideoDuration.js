require('dotenv').config();
const mongoose = require('mongoose');
const axios = require('axios');
const Video = require('../models/Video'); // ch·ªânh l·∫°i path n·∫øu c·∫ßn

const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/ten_database';
const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

// H√†m parse ISO 8601 duration (VD: PT1H2M10S ‚Üí "1 gi·ªù 2 ph√∫t 10 gi√¢y")
function parseDuration(duration) {
  const regex = /PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?/;
  const [, hours, minutes, seconds] = duration.match(regex) || [];
  return `${hours ? `${hours} gi·ªù ` : ''}${minutes ? `${minutes} ph√∫t ` : ''}${seconds ? `${seconds} gi√¢y` : ''}`.trim();
}

// H√†m g·ªçi API YouTube
async function fetchDuration(youtubeId) {
  try {
    const url = `https://www.googleapis.com/youtube/v3/videos?part=contentDetails&id=${youtubeId}&key=${YOUTUBE_API_KEY}`;
    const response = await axios.get(url);

    if (!response.data.items.length) {
      console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y video: ${youtubeId}`);
      return null;
    }

    return response.data.items[0].contentDetails.duration;
  } catch (err) {
    console.error(`‚ö†Ô∏è L·ªói API cho video ${youtubeId}:`, err.message);
    return null;
  }
}

// Ch·∫°y update to√†n b·ªô video
async function updateDurations() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB");

    const videos = await Video.find({});
    console.log(`üîç T√¨m th·∫•y ${videos.length} video c·∫ßn c·∫≠p nh·∫≠t`);
    const count = await Video.countDocuments();
    console.log(`üì¶ T·ªïng s·ªë video trong DB: ${count}`);

    const sample = await Video.findOne();
    console.log('V√≠ d·ª• 1 video:', sample);

    for (const video of videos) {
      if (video.duration) {
        console.log(`‚è≠ B·ªè qua video ${video.title} (ƒë√£ c√≥ duration)`);
        continue;
      }

      console.log(`‚è≥ ƒêang x·ª≠ l√Ω video: ${video.title} (${video.youtubeId})`);

      const isoDuration = await fetchDuration(video.youtubeId);
      if (!isoDuration) continue;

      video.duration = parseDuration(isoDuration);
      await video.save();

      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${video.title} ‚Üí ${video.duration}`);
    }

    console.log("üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t duration cho t·∫•t c·∫£ video");
    process.exit(0);

  } catch (err) {
    console.error("‚ùå L·ªói script:", err);
    process.exit(1);
  }
}

updateDurations();
