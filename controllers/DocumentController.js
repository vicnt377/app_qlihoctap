const Document = require('../models/Document');
const fs = require('fs');
const path = require('path');
const multer = require('multer');
const upload = require('../middlewares/uploadMiddlewares'); // import upload

class DocumentController {
  async getDocument(req, res, next) {
    try {
      const userId = req.session?.user?._id;
      if (!userId) return res.redirect('/login');

      const documents = await Document.find({ username: userId });
      res.render('user/document', { user: req.session.user, documents });
    } catch (err) {
      next(err);
    }
  }

  // üëâ Wrapper x·ª≠ l√Ω multer + l·ªói
  handleUpload(req, res, next) {
    upload.single('file')(req, res, async (err) => {
      if (err instanceof multer.MulterError) {
        req.session.errorMessage = 'L·ªói khi upload file.';
        return res.redirect('/document/upload');
      } else if (err) {
        req.session.errorMessage = err.message;
        return res.redirect('/document/upload');
      }

      // G·ªçi ti·∫øp ƒë·∫øn upload logic
      await this.uploadDocument(req, res, next);
    });
  }

  // üëâ Logic l∆∞u th√¥ng tin file
  async uploadDocument(req, res, next) {
    try {
      const userId = req.session?.user?._id;
      if (!userId || !req.file || !req.body.title) {
        req.session.errorMessage = "Thi·∫øu th√¥ng tin khi upload t√†i li·ªáu.";
        return res.redirect('/document/upload');
      }

      const newDoc = new Document({
        username: userId,
        title: req.body.title,
        file: `${userId}/${req.file.filename}` // L∆∞u ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
      });

      await newDoc.save();
      res.redirect('/document');
    } catch (err) {
      next(err);
    }
  }

  async deleteDocument(req, res, next) {
    try {
      const docId = req.params.id;
      const userId = req.session?.user?._id;

      if (!docId || !userId) {
        req.session.errorMessage = 'Thi·∫øu th√¥ng tin khi x√≥a.';
        return res.redirect('/document');
      }

      const doc = await Document.findOne({ _id: docId, username: userId });
      if (!doc) {
        req.session.errorMessage = 'Kh√¥ng t√¨m th·∫•y t√†i li·ªáu ho·∫∑c kh√¥ng c√≥ quy·ªÅn x√≥a.';
        return res.redirect('/document');
      }

      // file: 680ff5807e01374e584024c4/t√™n-file.docx
      const relativePath = doc.file;
      const absolutePath = path.resolve(__dirname, '../src/public/file', relativePath);

      // Ki·ªÉm tra v√† x√≥a file n·∫øu t·ªìn t·∫°i
      if (fs.existsSync(absolutePath)) {
        fs.unlinkSync(absolutePath);
      } else {
        console.warn('Kh√¥ng t√¨m th·∫•y file tr√™n ·ªï ƒëƒ©a:', absolutePath);
      }

      // X√≥a t√†i li·ªáu trong DB
      await Document.deleteOne({ _id: docId });
      console.log('ƒê∆∞·ªùng d·∫´n file c·∫ßn x√≥a:', absolutePath);

      req.session.successMessage = 'ƒê√£ x√≥a t√†i li·ªáu th√†nh c√¥ng.';
      res.redirect('/document');
    } catch (err) {
      console.error('L·ªói khi x√≥a t√†i li·ªáu:', err);
      req.session.errorMessage = 'ƒê√£ x·∫£y ra l·ªói khi x√≥a t√†i li·ªáu.';
      res.redirect('/document');
    }
  }
}

module.exports = new DocumentController();
