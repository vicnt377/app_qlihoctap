
const User = require('../../models/User');
const Notification = require('../../models/Notification')
const { mongooseToObject } = require('../../src/util/mongoose');

class LoginController {
    re_login(req, res){
        res.render('auth/re-login', {layout: "auth", error: null, bodyClass: 'landing-page' });
    }

    login_user(req, res) {
        res.render('auth/login', {layout: "auth", error: null });
    }

    logout(req, res) {
        req.session.destroy(() => {
            res.redirect("/",);
        });
    }

    showResetPassword(req, res) {
        res.render('auth/reset-password', {layout: "auth", messages: {} });
    }

    async login(req, res) {
        try {
            const { username, password } = req.body;
            console.log("Nh·∫≠n d·ªØ li·ªáu:", username, password);

            const user = await User.findOne({ username });
            console.log("User t√¨m th·∫•y:", user);

            if (!user || user.password !== password) {
                req.flash('error_msg', 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!');
                return res.redirect('/login-user');
            }

            // ‚úÖ Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
            if (!user.isActive) {
                req.flash('error_msg', 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n!');
                return res.redirect('/login-user');
            }

            // ‚úÖ Ch·ªâ cho ph√©p user c√≥ role l√† "user" ƒëƒÉng nh·∫≠p
            if (user.role !== 'user') {
                req.flash('error_msg', 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o h·ªá th·ªëng ng∆∞·ªùi d√πng!');
                return res.redirect('/login-user');
            }

            // ‚úÖ L∆∞u session
            req.session.user = {
                _id: user._id, // Gi·ªØ nguy√™n ObjectId
                username: user.username,
                avatar: user.avatar,
                role: user.role
            };
            req.session.userId = user._id;
            console.log("L∆∞u session:", req.session.user);

            // ‚úÖ T·∫°o th√¥ng b√°o ch√†o m·ª´ng s·ª≠ d·ª•ng model ƒë·∫ßy ƒë·ªß
            try {
                const welcomeNotification = new Notification({
                    recipient: user._id, // S·ª≠ d·ª•ng recipient thay v√¨ userId
                    sender: user._id, // S·ª≠ d·ª•ng sender
                    type: 'welcome', // Lo·∫°i th√¥ng b√°o
                    title: 'Ch√†o m·ª´ng tr·ªü l·∫°i! üëã', // ‚úÖ Th√™m title
                    message: `Ch√†o m·ª´ng ${user.username} ƒëƒÉng nh·∫≠p v√†o h·ªá th·ªëng h·ªçc t·∫≠p! Ch√∫c b·∫°n c√≥ m·ªôt ng√†y h·ªçc hi·ªáu qu·∫£.`,
                    relatedModel: 'System', // Model li√™n quan
                    relatedId: null, // Kh√¥ng c√≥ ID c·ª• th·ªÉ
                    isRead: false,
                    metadata: {
                        action: 'login',
                        timestamp: new Date()
                    }
                });
                
                await welcomeNotification.save();
                console.log("‚úÖ ƒê√£ t·∫°o th√¥ng b√°o ch√†o m·ª´ng cho user:", user.username);
                
                // Log th√¥ng b√°o ƒë√£ t·∫°o
                console.log("üîî Th√¥ng b√°o ch√†o m·ª´ng:", {
                    id: welcomeNotification._id,
                    recipient: welcomeNotification.recipient,
                    title: welcomeNotification.title,
                    message: welcomeNotification.message
                });
                
            } catch (notificationError) {
                console.error("‚ùå L·ªói khi t·∫°o th√¥ng b√°o ch√†o m·ª´ng:", notificationError);
                // Kh√¥ng d·ª´ng qu√° tr√¨nh ƒëƒÉng nh·∫≠p n·∫øu t·∫°o th√¥ng b√°o th·∫•t b·∫°i
            }
            
            res.redirect('/home');

        } catch (error) {
            console.error("L·ªói server:", error);
            res.status(500).send("L·ªói m√°y ch·ªß!");
        }
    }

    async updatePassword(req, res) {
        const { username, newPassword } = req.body;

        try {
            // T√¨m user theo username
            const user = await User.findOne({ username });
            if (!user) {
                return res.render('auth/reset-password', { 
                    layout: "auth", 
                    messages: { error: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" } });
            }

            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
            user.password = newPassword;
            await user.save({ validateBeforeSave: false });
            res.redirect('/login?message=ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng');

        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
            res.render('auth/reset-password', {
                layout: "auth",
                messages: { error: 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!' } });
        }
    }
    
}

module.exports = new LoginController();