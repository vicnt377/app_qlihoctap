const Semester = require('../../models/Semester');
const Score = require('../../models/Score');
const Course = require('../../models/Course');
const User = require('../../models/User');
const Notification = require('../../models/Notification');
const helper = require('../../src/util/helper');
const moment = require('moment');

class SemesterController {
  async getSemester(req, res) {
    try {
      const userId = req.user?._id || req.session?.user?._id;
      if (!userId) {
        return res.render('auth/login');
      }
      const user = await User.findById(userId).lean();
      // 1. L·∫•y t·∫•t c·∫£ h·ªçc k·ª≥ c·ªßa user
      const semesterDocs = await Semester.find({ user: userId })
        .populate({
          path: 'score',
          populate: { path: 'HocPhan' }   // ‚úÖ l·∫•y chi ti·∫øt m√¥n h·ªçc
        })
        .lean();

      // 2. Nh√≥m score theo h·ªçc k·ª≥
      const classesGroupedBySemester = semesterDocs.map(sem => ({
        _id: sem._id,
        tenHocKy: sem.tenHocKy,
        startDate: sem.startDate,
        soTuan: sem.soTuan,
        scores: sem.score || []   // ‚úÖ gi·ªù ƒë√¢y score ƒë√£ c√≥ HocPhan
      }));

      // 3. T·∫°o danh s√°ch nƒÉm v√† t√™n h·ªçc k·ª≥
      const years = semesterDocs.map(sem => new Date(sem.startDate).getFullYear().toString());
      const semestersList = semesterDocs.map(sem => sem.tenHocKy);

      // 4. T√¨m c√°c HocPhan ƒë√£ c√≥ trong Score
      const usedCourseIds = await Score.find({ user: userId }).distinct('HocPhan');

      // 5. T√¨m c√°c Course c·ªßa user ch∆∞a ƒë∆∞·ª£c th√™m v√†o Score
      const availableCourses = await Course.find({
        user: userId,
        _id: { $nin: usedCourseIds }
      }).lean();

      // 6. L·∫•y c√°c Score ch∆∞a g√°n semester
      const allScores = await Score.find({
        user: userId,
        semester: { $exists: false }
      })
        .populate('HocPhan')
        .lean();

      // 7. T·∫°o s·ª± ki·ªán FullCalendar
      const events = helper.generateEvents(semesterDocs);

      // 8. Render view
      res.render('user/semester', {
        user,
        classesGroupedBySemester,
        selectedSemester: '',
        selectedYear: '',
        years,
        semestersList,
        courses: availableCourses,
        scores: allScores,
        events,
      });

    } catch (error) {
      console.error('L·ªói l·∫•y l·ªãch h·ªçc:', error.message);
      res.status(500).send('L·ªói khi l·∫•y d·ªØ li·ªáu l·ªõp h·ªçc!');
    }
  }

  async getEditSemesterForm(req, res) {
    try {
      const userId = req.session?.user?._id;
      const semesterId = req.params.id;
      const user = await User.findById(userId).lean();
      // üëâ L·∫•y h·ªçc k·ª≥ hi·ªán t·∫°i + c√°c Score ƒë√£ g·∫Øn
      const semester = await Semester.findOne({ _id: semesterId, user: userId })
        .populate({
          path: 'score',
          populate: { path: 'HocPhan' }
        })
        .lean();

      if (!semester) {
        return res.status(404).send('Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥');
      }

      // üëâ L·∫•y danh s√°ch Course c·ªßa user
      const allCourses = await Course.find({ user: userId }).lean();

      // üëâ L·∫•y map c√°c Score ƒë√£ c√≥ (HocPhan._id ‚Üí Score)
      const scoreMap = {};
      semester.score?.forEach(sc => {
        scoreMap[sc.HocPhan._id.toString()] = sc;
      });

      // üëâ T·∫°o danh s√°ch hi·ªÉn th·ªã: 
      // N·∫øu Course ƒë√£ c√≥ trong semester ‚Üí l·∫•y Score
      // N·∫øu Course ch∆∞a c√≥ ‚Üí t·∫°o object gi·∫£ ƒë·ªÉ user c√≥ th·ªÉ tick th√™m
      const courseList = allCourses.map(c => {
        const existingScore = scoreMap[c._id.toString()];
        if (existingScore) {
          return {
            _id: existingScore._id,       // id c·ªßa Score
            isScore: true,                // ƒë√°nh d·∫•u ƒë√£ l√† Score
            HocPhan: c,
            thu: existingScore.thu,
            gioBatDau: existingScore.gioBatDau,
            gioKetThuc: existingScore.gioKetThuc,
            isSelected: true
          };
        } else {
          return {
            _id: c._id,                   // id c·ªßa Course (ch∆∞a c√≥ Score)
            isScore: false,
            HocPhan: c,
            thu: "",
            gioBatDau: "",
            gioKetThuc: "",
            isSelected: false
          };
        }
      });

      res.render('user/editSemester', {
        user,
        semester,
        courseList
      });
    } catch (err) {
      console.error('‚ùå L·ªói khi l·∫•y form s·ª≠a h·ªçc k·ª≥:', err);
      res.status(500).send('L·ªói server khi hi·ªÉn th·ªã form s·ª≠a h·ªçc k·ª≥.');
    }
  }

  async addNewSemester(req, res) {
    try {
      const userId = req.session.user._id;
      const { tenHocKy, startDate, soTuan, selectedCourses } = req.body;

      // T·∫°o h·ªçc k·ª≥
      const newSemester = new Semester({
        tenHocKy,
        startDate,
        soTuan,
        user: userId,
      });
      await newSemester.save();

      // T·∫°o score t∆∞∆°ng ·ª©ng cho m·ªói course
      const scoreIds = [];
      for (const course of selectedCourses) {
        const { courseId, thu, gioBatDau, gioKetThuc } = course;

        const newScore = await Score.create({
          user: userId,
          HocPhan: courseId,
          thu,
          gioBatDau,
          gioKetThuc,
          semester: newSemester._id,
        });

        scoreIds.push(newScore._id);
      }

      newSemester.score = scoreIds;
      await newSemester.save();

      // üîî Th√¥ng b√°o sau khi th√™m
      await Notification.create({
        recipient: userId,
        sender: userId,
        type: 'success',
        title: 'Th√™m h·ªçc k·ª≥ m·ªõi',
        message: `B·∫°n ƒë√£ th√™m h·ªçc k·ª≥ "${tenHocKy}" th√†nh c√¥ng.`,
        relatedModel: 'Semester',
        relatedId: newSemester._id
      });

      const populatedSemester = await Semester.findById(newSemester._id)
        .populate({ path: 'score', populate: 'HocPhan' })
        .lean();

      res.status(200).json({
        // message: '‚úÖ Th√™m h·ªçc k·ª≥ th√†nh c√¥ng!',
        semester: populatedSemester
      });

    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m h·ªçc k·ª≥:', error);
      res.status(500).json({ message: '‚ùå L·ªói server khi th√™m h·ªçc k·ª≥.' });
    }
  }

  async deleteSemester(req, res) {
    try {
      const userId = req.session?.user?._id;
      const semesterId = req.params.id;

      const deleted = await Semester.findOneAndDelete({
        _id: semesterId,
        user: userId,
      });

      if (!deleted) {
        return res.status(404).send('Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥ c·∫ßn x√≥a');
      }

      // üîî Th√¥ng b√°o sau khi x√≥a
      await Notification.create({
        recipient: userId,
        sender: userId,
        type: 'warning',
        title: 'X√≥a h·ªçc k·ª≥',
        message: `B·∫°n ƒë√£ x√≥a h·ªçc k·ª≥ "${deleted.tenHocKy}".`,
        relatedModel: 'Semester',
        relatedId: semesterId
      });

      res.redirect('/semester');
    } catch (error) {
      console.error('L·ªói khi x√≥a h·ªçc k·ª≥:', error);
      res.status(500).send('L·ªói m√°y ch·ªß khi x√≥a h·ªçc k·ª≥.');
    }
  }

  async updateSemester(req, res) {
    try {
      const userId = req.session?.user?._id;
      const semesterId = req.params.id;
      const { tenHocKy, startDate, soTuan, selectedItems, items } = req.body;

      const selectedIds = Array.isArray(selectedItems)
        ? selectedItems
        : selectedItems ? [selectedItems] : [];

      const semester = await Semester.findOne({ _id: semesterId, user: userId })
        .populate("score")
        .exec();

      if (!semester) {
        return res.status(404).send("Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥");
      }

      const newScoreIds = [];

      for (const itemId of Object.keys(items || {})) {
        const updates = items[itemId];
        const isSelected = selectedIds.includes(itemId);

        const existingScore = await Score.findOne({ _id: itemId, user: userId });

        if (existingScore) {
          if (isSelected) {
            existingScore.thu = updates.thu;
            existingScore.gioBatDau = updates.gioBatDau;
            existingScore.gioKetThuc = updates.gioKetThuc;
            existingScore.semester = semesterId;
            await existingScore.save();
            newScoreIds.push(existingScore._id);
          } else {
            existingScore.semester = null;
            await existingScore.save();
          }
        } else {
          if (isSelected) {
            const newScore = await Score.create({
              user: userId,
              HocPhan: itemId,
              thu: updates.thu,
              gioBatDau: updates.gioBatDau,
              gioKetThuc: updates.gioKetThuc,
              semester: semesterId,
            });
            newScoreIds.push(newScore._id);
          }
        }
      }

      semester.tenHocKy = tenHocKy;
      semester.startDate = new Date(startDate);
      semester.soTuan = parseInt(soTuan);

      const msPerWeek = 7 * 24 * 60 * 60 * 1000;
      semester.endDate = new Date(new Date(startDate).getTime() + soTuan * msPerWeek);

      semester.score = newScoreIds;
      await semester.save();

      // üîî Th√¥ng b√°o sau khi c·∫≠p nh·∫≠t
      await Notification.create({
        recipient: userId,
        sender: userId,
        type: 'info',
        title: 'C·∫≠p nh·∫≠t h·ªçc k·ª≥',
        message: `B·∫°n ƒë√£ c·∫≠p nh·∫≠t h·ªçc k·ª≥ "${semester.tenHocKy}".`,
        relatedModel: 'Semester',
        relatedId: semesterId
      });

      res.redirect("/semester");
    } catch (err) {
      console.error("‚ùå L·ªói updateSemester:", err);
      res.status(500).send("C·∫≠p nh·∫≠t h·ªçc k·ª≥ th·∫•t b·∫°i!");
    }
  }


}

module.exports = new SemesterController();
